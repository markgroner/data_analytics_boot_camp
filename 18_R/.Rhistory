PlayerID = kyrie_player_id,
PlayerPosition = '',
Season = season,
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = location,
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
kyrie_query <- list(
PlayerID = 202681,
PlayerPosition = '',
Season = season,
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = location,
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
kyrie_query <- list(
PlayerID = 202681,
PlayerPosition = '',
Season = '2016-17',
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = '',
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
library(httr)
library(jsonlite)
nba_api_request <- function(api_url, parameters, headers) {
request <- GET(
api_url,
query = parameters,
headrers
)
request_status <- stop_for_status(request)
print(request_status)
request_data <- content(request)
print(request_data)
}
kyrie_player_id <- 202681
kyrie_query <- list(
PlayerID = 202681,
PlayerPosition = '',
Season = '2016-17',
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = '',
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
shot_chart_url <- 'http://stats.nba.com/stats/shotchartdetail'
headers <- list(Accept-Language = 'en-US,en;q=0.5',
User-Agent = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
nba_api_request(shot_chart_url, kyrie_query, headers)
library(httr)
library(jsonlite)
nba_api_request <- function(api_url, parameters, headers) {
request <- GET(
api_url,
query = parameters,
headers
)
request_status <- stop_for_status(request)
print(request_status)
request_data <- content(request)
print(request_data)
}
kyrie_player_id <- 202681
kyrie_query <- list(
PlayerID = kyrie_player_id,
PlayerPosition = '',
Season = '2016-17',
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = '',
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
shot_chart_url <- 'http://stats.nba.com/stats/shotchartdetail'
headers <- list(Accept-Language = 'en-US,en;q=0.5',
User-Agent = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
nba_api_request(shot_chart_url, kyrie_query, headers)
library(httr)
library(jsonlite)
nba_api_request <- function(api_url, parameters, headers) {
request <- GET(
api_url,
query = parameters,
headers
)
request_status <- stop_for_status(request)
print(request_status)
request_data <- content(request)
print(request_data)
}
kyrie_player_id <- 202681
kyrie_query <- list(
PlayerID = kyrie_player_id,
PlayerPosition = '',
Season = '2016-17',
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = '',
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
shot_chart_url <- 'http://stats.nba.com/stats/shotchartdetail'
headers <- list(AcceptLanguage = 'en-US,en;q=0.5',
User-Agent = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
nba_api_request(shot_chart_url, kyrie_query, headers)
headers <- list(AcceptLanguage = 'en-US,en;q=0.5',
User-Agent = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
headers <- list(AcceptLanguage = 'en-US,en;q=0.5',
UserAgent = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
library(httr)
library(jsonlite)
nba_api_request <- function(api_url, parameters, headers) {
request <- GET(
api_url,
query = parameters,
headers
)
request_status <- stop_for_status(request)
print(request_status)
request_data <- content(request)
print(request_data)
}
kyrie_player_id <- 202681
kyrie_query <- list(
PlayerID = kyrie_player_id,
PlayerPosition = '',
Season = '2016-17',
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = '',
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
shot_chart_url <- 'http://stats.nba.com/stats/shotchartdetail'
headers <- list(AcceptLanguage = 'en-US,en;q=0.5',
UserAgent = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
nba_api_request(shot_chart_url, kyrie_query, headers)
headers <- list('Accept-Language' = 'en-US,en;q=0.5',
'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
library(httr)
library(jsonlite)
nba_api_request <- function(api_url, parameters, headers) {
request <- GET(
api_url,
query = parameters,
headers
)
request_status <- stop_for_status(request)
print(request_status)
request_data <- content(request)
print(request_data)
}
kyrie_player_id <- 202681
kyrie_query <- list(
PlayerID = kyrie_player_id,
PlayerPosition = '',
Season = '2016-17',
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = '',
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
shot_chart_url <- 'http://stats.nba.com/stats/shotchartdetail'
headers <- list('Accept-Language' = 'en-US,en;q=0.5',
'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
nba_api_request(shot_chart_url, kyrie_query, headers)
library(httr)
library(jsonlite)
library(dplyr)
nba_api_request <- function(api_url, parameters, headers) {
request <- GET(
api_url,
query = parameters,
add_headers(headers)
)
request_status <- stop_for_status(request)
data <- content(request)
raw_data <- data$resultSets[[1]]$rowSet
col_names <- as.character(data$resultSets[[1]]$headers)
if (length(raw_data) == 0) {
response_df <- data.frame(
matrix(nrow = 0, ncol = length(col_names))
)
} else {
response_df = data.frame(
matrix(
unlist(raw_data),
ncol = length(col_names),
byrow = TRUE
)
)
}
response_df <- tbl_df(response_df)
names(response_df) <- col_names
response_df <- mutate(response_df,
PERIOD = as.numeric(as.character(PERIOD)),
SHOT_DISTANCE = as.numeric(as.character(SHOT_DISTANCE)),
SHOT_MADE_NUMERIC = as.numeric(as.character(SHOT_MADE_FLAG)),
SHOT_ATTEMPTED_FLAG = as.numeric(as.character(SHOT_ATTEMPTED_FLAG)))
return(response_df)
}
kyrie_player_id <- 202681
kyrie_query <- list(
PlayerID = kyrie_player_id,
PlayerPosition = '',
Season = '2016-17',
ContextMeasure = 'FGA',
DateFrom = '',
DateTo = '',
GameID = '',
GameSegment = '',
LastNGames = 0,
LeagueID = '00',
Location = '',
Month = 0,
OpponentTeamID = 0,
Outcome = '',
Period = 0,
Position = '',
RookieYear = '',
SeasonSegment = '',
SeasonType = 'Regular Season',
TeamID = 0,
VsConference = '',
VsDivision = '')
shot_chart_url <- 'http://stats.nba.com/stats/shotchartdetail'
headers <- c('Accept-Language' = 'en-US,en;q=0.5',
'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
Referer = 'http://markgroner.com',
Connection = 'keep-alive')
df <- nba_api_request(shot_chart_url, kyrie_query, headers)
print(df)
install.packages("splitstackshape")
install.packages("tidyverse")
install.packages("reshape2")
install.packages("devtools")
install.packages("plotly")
install.packages("crosstalk")
install.packages("DT")
install.packages("fivethirtyeight")
require("splitstackshape")
require("tidyverse")
require("reshape2")
require("devtools")
require("plotly")
require("crosstalk")
require("DT")
require("fivethirtyeight")
a <- TRUE
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
for (student in students){
print(student)
}
for (student in students){
locker_combo <- sample(1:33, 3, replace=T)
print(student)
print(locker_combo)
print(" ")
}
getwd()
setwd("C:/Users/markg/repos/data_dev/18_R")
getwd()
students <- read_csv('students.csv')
View(students)
students_df <- read_csv('2/students.csv')
View(students_df)
students_df <- read_csv('2/students.csv')
View(students_df)
setwd('2')
getwd()
students_df <- read_csv('1/06_Stu_Tibble/students.csv')
View(students_df)
students_df <- read_csv('1/06_Stu_Tibble/students.csv')
View(students_df)
students_df <- read_csv('1/06_Stu_Tibble/students.csv')
View(students_df)
students_df <- read_csv('1/06_Stu_Tibble/students.csv')
View(students_df)
schools_df <- read_csv('1/06_Stu_Tibble/schools')
schools_df <- read_csv('1/06_Stu_Tibble/schools.csv')
View(schools_df)
schools <- schools_df['school_name']
schools
school_names <- c(schools_df['school_name'])
school_names
length(school_names)
length(school_names[1])
school_names <- c(schools_df['school_name'])
school_names[1]
school_names["school_name"]
school_names
school_names <- schools_df['school_name']
school_names
length(school_names)
nrow(school_names)
"A list of all schools"
school_names <- c(schools_df['school_name'])
school_names
"Calculate the total count of schools"
nrow(school_names)
nrows(school_names)
"A list of all schools"
school_names <- schools_df['school_name']
school_names
nrows(school_names)
nrow(school_names)
nrow(schools_df)
nrow(students_df)
mean_math <- mean(students_df["math_score"])
mean_math
students_df <- read_csv('1/06_Stu_Tibble/students.csv', stringsAsFactors=FALSE)
students_df <- read_csv('1/06_Stu_Tibble/students.csv', stringsAsFactors=FALSE)
students_df
mean_math <- mean(students_df[["math_score"]])
mean_math
mean_reading <- mean(students_df[["reading_score"]])
students_df
mean_reading
school_names <- schools_df[['school_name']]
school_names
passing_reading <- filter(students_df, reading_score > 70)
passing_reading
nrows(passing_reading)
nros(passing_reading)
nrow(passing_reading)
num_students
"Calculate the total count of schools"
num_schools <- nrow(schools_df)
num_schools
"Calculate the total number of students"
num_students <- nrow(students_df)
num_students
passing_reading <- filter(students_df, reading_score > 70)
num_passing_reading <- nrow(passing_reading)
num_passing_reading
"Calculate the percentage of students with passing math scores, i.e. over 70%."
passing_math <- filter(students_df, math_score > 70)
num_passing_math <- nrow(passing_math)
num_passing_math
"Calculate the overall passing rate, i.e. the average of math and reading passing percentages"
passing_both <- filter(students_df, reading_score > 70, math_score > 70)
num_passing_both <- nrow(passing_both)
num_passing_both
library(tidyverse)
myvec <- rnorm(1000, 5, 1)
samplevec <- sample(myvec, 100)
roundedvec <- round(samplevec)
avg <- mean(roundedvec)
myvec <- rnorm(2000, 3, 2)
myvec %>% sample(100)
myvec %>% sample(100) %>% round() %>% mean()
library(tidyverse)
test.tb.1 <- tibble(
City = c("Dhaka", "Franklin", "Dublin", "Stuttgart"),
Contry = c("Bangladesh", "United States", "Ireland", "Deutschland"),
Population = c(14400000, 74794, 527612, 612441),
Square.Miles = c(118.3, 30.12, 44.4, 80.06)
Population.Density = Population/Square.Miles
)
library(tidyverse)
test.tb.1 <- tibble(
City = c("Dhaka", "Franklin", "Dublin", "Stuttgart"),
Contry = c("Bangladesh", "United States", "Ireland", "Deutschland"),
Population = c(14400000, 74794, 527612, 612441),
Square.Miles = c(118.3, 30.12, 44.4, 80.06),
Population.Density = Population/Square.Miles
)
View(test.tb.1)
test.tb.1
install.packages(plotly)
install.package(plotly)
install.packages("plotly")
install.packages("plotly")
library(plotly)
